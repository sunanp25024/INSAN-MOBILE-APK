
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    
    // Is the user signed in?
    function isSignedIn() {
      return request.auth != null;
    }

    // Is the user accessing their OWN document?
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Get the role of the currently signed-in user from their profile
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Check if the current user has a specific role
    function isRole(role) {
      return isSignedIn() && getRole() == role;
    }
    
    // Check if the current user's role is in a list of allowed roles
    function isOneOfRoles(roles) {
      return isSignedIn() && getRole() in roles;
    }

    // --- Collection Rules ---

    // /users/{userId}
    match /users/{userId} {
      // READ: 
      // 1. You can get your own profile.
      // 2. Managerial roles (MasterAdmin, Admin, PIC) can get any profile.
      // 3. Managerial roles can list all users for management pages.
      allow get: if isOwner(userId) || isOneOfRoles(['MasterAdmin', 'Admin', 'PIC']);
      allow list: if isOneOfRoles(['MasterAdmin', 'Admin', 'PIC']);

      // WRITE:
      // 1. You can update your own profile.
      allow update: if isOwner(userId);
      // 2. MasterAdmins can create/update/delete any user.
      allow write: if isRole('MasterAdmin');
      // 3. Admins can create/update/delete PICs and Kurirs.
      allow write: if isRole('Admin') && (resource.data.role == 'PIC' || resource.data.role == 'Kurir');
    }
    
    // /approval_requests/{requestId}
    match /approval_requests/{requestId} {
      // READ:
      // 1. MasterAdmins and Admins can see all requests.
      // 2. You can see the requests you created (for the status page).
      allow read: if isOneOfRoles(['MasterAdmin', 'Admin']) || (resource.data.requestedByUid == request.auth.uid);
      
      // WRITE:
      // 1. PICs and Admins can create new requests. This is the key fix.
      allow create: if isOneOfRoles(['PIC', 'Admin']) && request.resource.data.requestedByUid == request.auth.uid;
      // 2. MasterAdmins and Admins can update requests to approve or reject them.
      allow update: if isOneOfRoles(['MasterAdmin', 'Admin']);
      // 3. Nobody can delete approval requests, for audit trail purposes.
      allow delete: if false;
    }

    // /kurir_daily_tasks/{taskId} and its subcollections
    match /kurir_daily_tasks/{taskId} {
      // READ: Managerial roles can see all task data for monitoring.
      allow read: if isOneOfRoles(['MasterAdmin', 'Admin', 'PIC']);
      
      // WRITE: Only the assigned Kurir can create or update their own task.
      allow write: if isRole('Kurir') && (request.resource.data.kurirUid == request.auth.uid);

      // Subcollection for packages within a task
      match /packages/{packageId} {
         // READ: Managerial roles can see package details.
        allow read: if isOneOfRoles(['MasterAdmin', 'Admin', 'PIC']);
        
        // WRITE: Only the Kurir who owns the parent task can manage the packages inside it.
        allow write: if isRole('Kurir') && get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid == request.auth.uid;
      }
    }
    
    // /attendance/{attendanceId}
    match /attendance/{attendanceId} {
      // READ: Managerial roles can read all attendance for monitoring.
      allow read: if isOneOfRoles(['MasterAdmin', 'Admin', 'PIC']);
      
      // WRITE: A Kurir can only create or update their own attendance.
      allow write: if isRole('Kurir') && request.resource.data.kurirUid == request.auth.uid;
    }
    
    // /notifications/{notificationId}
    match /notifications/{notificationId} {
      // READ: Only MasterAdmins can see system-wide notifications.
      allow read: if isRole('MasterAdmin');
      
      // WRITE: Only the server can create notifications.
      allow write: if false; 
    }
  }
}
