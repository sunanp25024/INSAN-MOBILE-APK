
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's role from their profile
    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    
    // Helper function to check if the user has one of the specified roles
    function hasOneOfRoles(roles) {
      return isAuthenticated() && getUserRole(request.auth.uid) in roles;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // ANY authenticated user can get their own profile.
      // Managerial roles can get ANY single user profile.
      allow get: if isAuthenticated() && (isOwner(userId) || hasOneOfRoles(['MasterAdmin', 'Admin', 'PIC']));

      // Managerial roles can list users (e.g., for management pages).
      // This rule FIXES the permission error for the "Manage Kurir" page.
      allow list: if hasOneOfRoles(['MasterAdmin', 'Admin', 'PIC']);

      // ONLY MasterAdmin or Admin can create new users directly.
      allow create: if hasOneOfRoles(['MasterAdmin', 'Admin']);

      // A user can update their own profile.
      // MasterAdmin and Admin can update any user profile.
      allow update: if isAuthenticated() && (isOwner(userId) || hasOneOfRoles(['MasterAdmin', 'Admin']));

      // ONLY MasterAdmin or Admin can delete users directly.
      allow delete: if hasOneOfRoles(['MasterAdmin', 'Admin']);
    }

    // Rules for the 'approval_requests' collection
    match /approval_requests/{requestId} {
      // MasterAdmin and Admin can read all requests.
      // PIC and Admin can read requests they created.
      allow read: if hasOneOfRoles(['MasterAdmin', 'Admin']) || (isAuthenticated() && get(/databases/$(database)/documents/approval_requests/$(requestId)).data.requestedByUid == request.auth.uid);

      // PIC and Admin can create new requests.
      allow create: if hasOneOfRoles(['PIC', 'Admin']);
      
      // ONLY MasterAdmin and Admin can update (approve/reject) requests.
      allow update: if hasOneOfRoles(['MasterAdmin', 'Admin']);

      // No one can delete requests for audit trail purposes.
      allow delete: if false;
    }
    
     // Rules for the 'notifications' collection (only for MasterAdmin)
    match /notifications/{notificationId} {
      allow read, write: if hasOneOfRoles(['MasterAdmin']);
      allow create: if isAuthenticated(); // Allow any authenticated user to potentially create a notification (e.g., via a server function)
    }

    // Rules for subcollections within 'kurir_daily_tasks'
    match /kurir_daily_tasks/{taskId}/{document=**} {
      // Kurir can read/write to their own tasks.
      // Managerial roles can read everything.
      allow read: if hasOneOfRoles(['MasterAdmin', 'Admin', 'PIC']) || (isAuthenticated() && taskId.startsWith(request.auth.uid));
      allow write: if isAuthenticated() && taskId.startsWith(request.auth.uid);
    }
    
    // Default-deny for any path not matched.
  }
}
