
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check role
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to get today's date string in 'yyyy-MM-dd' format.
    // NOTE: This uses the request time, so it's consistent.
    function getTodayDateString() {
      let today = request.time.toMillis();
      let year = string(request.time.year());
      let month = string(request.time.month());
      let day = string(request.time.day());
      // Pad month and day with leading zero if needed
      let paddedMonth = month.size() == 1 ? '0' + month : month;
      let paddedDay = day.size() == 1 ? '0' + day : day;
      return year + '-' + paddedMonth + '-' + paddedDay;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // ANY authenticated user can read their OWN profile.
      allow get: if request.auth.uid == userId;

      // MasterAdmins can read any user profile.
      allow list: if isRole('MasterAdmin') || isRole('Admin') || isRole('PIC');
      
      // Only MasterAdmins can create users directly.
      // Admins can create users through an approval process, which is handled by backend functions.
      allow create: if isRole('MasterAdmin');

      // A user can update their own profile (e.g., name, avatar).
      // A MasterAdmin can update any user profile.
      allow update: if request.auth.uid == userId || isRole('MasterAdmin');
      
      // Only a MasterAdmin can delete a user.
      allow delete: if isRole('MasterAdmin');
    }
    
    // Rules for the 'attendance' collection
    match /attendance/{docId} {
      // Kurir can create/update their own attendance record for today.
      allow create: if request.auth.uid == request.resource.data.kurirUid
                    && docId == request.auth.uid + '_' + getTodayDateString();
      allow update: if request.auth.uid == resource.data.kurirUid
                    && docId == request.auth.uid + '_' + getTodayDateString();
      
      // A user can read their OWN attendance records.
      // PICs can read attendance records of any courier (they filter on client-side).
      // Admins/MasterAdmins can read any record.
      allow read: if request.auth.uid == resource.data.kurirUid 
                  || isRole('PIC') || isRole('Admin') || isRole('MasterAdmin');
    }
    
    // Rules for 'kurir_daily_tasks' collection and its 'packages' subcollection
    match /kurir_daily_tasks/{taskId} {
      // A Kurir can create/update their own task for today.
      // Admins/MasterAdmins can also manage these tasks if needed.
      allow write: if request.auth.uid == request.resource.data.kurirUid || isRole('Admin') || isRole('MasterAdmin');
      
      // A Kurir can read their own task.
      // PIC, Admin, and MasterAdmin can read any task document.
      allow read: if request.auth.uid == resource.data.kurirUid 
                  || isRole('PIC') || isRole('Admin') || isRole('MasterAdmin');

      // Rules for the 'packages' subcollection within a task
      match /packages/{packageId} {
        // The Kurir who owns the parent task document can manage packages.
        allow read, write, delete: if request.auth.uid == get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid
                                  || isRole('Admin') || isRole('MasterAdmin');
      }
    }
    
    // Rules for 'approval_requests' collection
    match /approval_requests/{requestId} {
      // Only Admins can create new requests.
      allow create: if isRole('Admin');
      
      // MasterAdmins can read/update/delete any request.
      // The Admin who created the request can read it to see its status.
      allow read, update, delete: if isRole('MasterAdmin') || request.auth.uid == resource.data.requestedByUid;
      allow list: if isRole('MasterAdmin') || isRole('Admin');
    }

    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
        // Only readable by MasterAdmin and PICs for now. Backend functions can create them.
        allow read: if isRole('MasterAdmin') || isRole('PIC');
        allow write: if false; // No client should write directly.
    }
  }
}
