
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check user role from their profile document
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isManager() {
      return request.auth.uid != null && (getRole(request.auth.uid) in ['MasterAdmin', 'Admin', 'PIC']);
    }
    
    function isAdmin() {
      return request.auth.uid != null && (getRole(request.auth.uid) in ['MasterAdmin', 'Admin']);
    }

    function isMasterAdmin() {
      return request.auth.uid != null && getRole(request.auth.uid) == 'MasterAdmin';
    }

    // --- Users Collection ---
    match /users/{userId} {
      // READ: Users can read their own profile. Managers can read any profile.
      allow read: if request.auth.uid == userId || isManager();
      
      // CREATE: A user can create their own profile document. THIS SOLVES THE SETUP PROBLEM.
      allow create: if request.auth.uid == userId;
      
      // UPDATE: A user can update their own profile. Admins can update any profile.
      allow update: if request.auth.uid == userId || isAdmin();
      
      // DELETE: Only MasterAdmins can delete users.
      allow delete: if isMasterAdmin();
    }
    
    // --- Approval Requests ---
    match /approval_requests/{requestId} {
      // READ: The requester can read their own request. Admins can read all.
      allow read: if request.auth.uid != null && (resource.data.requestedByUid == request.auth.uid || isAdmin());
      // CREATE: Authenticated users can create requests. This will be handled by server actions for security.
      allow create: if request.auth.uid != null;
      // UPDATE: Only Admins can update (approve/reject). This will be handled by server actions for security.
      allow update: if isAdmin();
    }
    
    // --- Attendance Records ---
    match /attendance/{attendanceId} {
      // READ: The courier can read their own record. Managers can read all.
      allow read: if request.auth.uid != null && (resource.data.kurirUid == request.auth.uid || isManager());
      // WRITE: Only the assigned courier can create/update their attendance.
      allow write: if request.auth.uid != null && request.resource.data.kurirUid == request.auth.uid;
    }
    
    // --- Kurir Daily Tasks ---
    match /kurir_daily_tasks/{taskId} {
      // READ: The courier can read their own task. Managers can read all.
      allow read: if request.auth.uid != null && (resource.data.kurirUid == request.auth.uid || isManager());
      // WRITE: Only the assigned courier can write to their task document.
      allow write: if request.auth.uid != null && request.resource.data.kurirUid == request.auth.uid;
      
      // Subcollection for packages within a task
      match /packages/{packageId} {
         // READ: The courier can read their own task's packages. Managers can read all.
         allow read: if request.auth.uid != null && (get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid == request.auth.uid || isManager());
         // WRITE: Only the assigned courier can write to the packages.
         allow write: if request.auth.uid != null && get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid == request.auth.uid;
      }
    }
    
    // --- Notifications ---
    match /notifications/{notificationId} {
      // Notifications are created by the server (Admin SDK).
      // READ/UPDATE: Only MasterAdmins can interact with notifications directly.
      allow read, update: if isMasterAdmin();
      allow create, delete: if false;
    }
  }
}
