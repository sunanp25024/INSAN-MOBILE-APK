
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get a user's profile data
    function getUserProfile(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    
    // Helper function to check if the user has a specific role
    function hasRole(role) {
      return isAuthenticated() && getUserProfile(request.auth.uid).role == role;
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    // Collection: users
    match /users/{userId} {
      // ANY authenticated user can read their OWN profile
      // Admin/MasterAdmin can read ANY profile
      allow read: if isAuthenticated() && (isOwner(userId) || hasRole('Admin') || hasRole('MasterAdmin'));
      
      // A user can CREATE their own profile document (during sign up)
      allow create: if isOwner(userId);

      // A user can UPDATE their OWN profile
      // Admin/MasterAdmin can update ANY profile
      allow update: if isAuthenticated() && (isOwner(userId) || hasRole('Admin') || hasRole('MasterAdmin'));

      // ONLY MasterAdmin can delete user profiles
      allow delete: if hasRole('MasterAdmin');
    }
    
    // Collection: approval_requests
    match /approval_requests/{requestId} {
      // Admin and MasterAdmin can read all requests.
      // PIC can read requests they created.
      allow read: if hasRole('Admin') || hasRole('MasterAdmin') || (hasRole('PIC') && resource.data.requestedByUid == request.auth.uid);
      
      // Admin and PIC can create new requests.
      allow create: if hasRole('Admin') || hasRole('PIC');
      
      // ONLY Admin and MasterAdmin can update (approve/reject) requests.
      allow update: if hasRole('Admin') || hasRole('MasterAdmin');

      // No one can delete approval requests for audit trail purposes.
      allow delete: if false;
    }
    
    // Collection: attendance
    match /attendance/{attendanceId} {
       // Kurir can read/write their own attendance.
       // Managerial roles can read any attendance.
       allow read: if isAuthenticated() && (resource.data.kurirUid == request.auth.uid || hasRole('PIC') || hasRole('Admin') || hasRole('MasterAdmin'));
       allow write: if isAuthenticated() && resource.data.kurirUid == request.auth.uid;
    }
    
    // Collection: kurir_daily_tasks and its subcollection
    match /kurir_daily_tasks/{taskId} {
      // Kurir can read/write their own tasks.
      // Managerial roles can read any task.
      allow read: if isAuthenticated() && (resource.data.kurirUid == request.auth.uid || hasRole('PIC') || hasRole('Admin') || hasRole('MasterAdmin'));
      allow write: if isAuthenticated() && request.resource.data.kurirUid == request.auth.uid;
      
      match /packages/{packageId} {
        // Same permissions as the parent task document
        allow read: if get(parent).data.kurirUid == request.auth.uid || hasRole('PIC') || hasRole('Admin') || hasRole('MasterAdmin');
        allow write: if get(parent).data.kurirUid == request.auth.uid;
      }
    }
    
     // Collection: notifications
    match /notifications/{notificationId} {
      // Only Admin and MasterAdmin can view system notifications
      allow read: if hasRole('Admin') || hasRole('MasterAdmin');
      // Only server can create notifications
      allow create: if false;
      // Admin/MasterAdmin can update (e.g., mark as read)
      allow update: if hasRole('Admin') || hasRole('MasterAdmin');
      // No one deletes notifications
      allow delete: if false;
    }

  }
}
