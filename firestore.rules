rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Users Collection ---
    // Users can read and update their own profile.
    // Creating/deleting a user is handled by a server-side function (Admin Action).
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      // Allow list for admins/pics to find other users.
      allow list: if request.auth.uid != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['MasterAdmin', 'Admin', 'PIC']);
    }

    // --- Attendance Collection ---
    // A Kurir can only manage their own attendance records.
    match /attendance/{docId} {
      function isOwnerByDocId() {
        return request.auth.uid != null && request.auth.uid == docId.split('_')[0];
      }
      function isOwnerByRequestData() {
        return request.auth.uid != null && request.auth.uid == request.resource.data.kurirUid;
      }
      function isOwnerByExistingData() {
        return request.auth.uid != null && request.auth.uid == resource.data.kurirUid;
      }

      allow get: if isOwnerByDocId();
      // Allow list queries. Client MUST filter by kurirUid for security.
      allow list: if request.auth.uid != null;
      
      allow create: if isOwnerByRequestData() && isOwnerByDocId();
      allow update: if isOwnerByExistingData() && isOwnerByDocId();
    }

    // --- Kurir Daily Tasks Collection ---
    // A Kurir can only manage their own daily task document.
    match /kurir_daily_tasks/{taskId} {
      function isOwnerOfTaskByDocId() {
        return request.auth.uid != null && request.auth.uid == taskId.split('_')[0];
      }
      function isOwnerOfTaskByRequestData() {
        return request.auth.uid != null && request.auth.uid == request.resource.data.kurirUid;
      }
      function isOwnerOfTaskByExistingData() {
        return request.auth.uid != null && request.auth.uid == resource.data.kurirUid;
      }
      
      allow get: if isOwnerOfTaskByDocId();
      // Allow list queries. Client MUST filter by kurirUid.
      allow list: if request.auth.uid != null;
      
      allow create: if isOwnerOfTaskByRequestData() && isOwnerOfTaskByDocId();
      allow update, delete: if isOwnerOfTaskByExistingData() && isOwnerOfTaskByDocId();

      // --- Packages Subcollection ---
      // A Kurir can manage packages only within their own daily task document.
      match /packages/{packageId} {
        allow read, write: if request.auth.uid != null &&
                              exists(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)) &&
                              get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid == request.auth.uid;
      }
    }
    
    // --- Approval Requests Collection ---
    // MasterAdmins can read/write all. Admins can read their own.
    match /approval_requests/{requestId} {
      function userRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      }
      
      allow read: if request.auth.uid != null && 
                     (userRole() == 'MasterAdmin' ||
                      (userRole() == 'Admin' && resource.data.requestedByUid == request.auth.uid));
      allow list: if request.auth.uid != null && userRole() in ['MasterAdmin', 'Admin'];
      // Creation is done by Admins, handled by client code. Update/Delete is server-side only.
      allow create: if request.auth.uid != null && userRole() == 'Admin';
    }

    // --- Notifications Collection ---
    // Read-only for MasterAdmins. Write is server-side only.
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MasterAdmin';
    }
  }
}
