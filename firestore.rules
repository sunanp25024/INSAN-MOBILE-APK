rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
        // Use `exists` to prevent errors if user doc doesn't exist yet during creation.
        return getAfter(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function requestingUserRole() {
      return getUserData(request.auth.uid).role;
    }

    function isMasterAdmin() {
        return isSignedIn() && requestingUserRole() == 'MasterAdmin';
    }
    
    function isAdmin() {
        return isSignedIn() && (requestingUserRole() == 'Admin' || isMasterAdmin());
    }

    function isPIC() {
        return isSignedIn() && (requestingUserRole() == 'PIC' || isAdmin());
    }
    
    function isKurir() {
      return isSignedIn() && requestingUserRole() == 'Kurir';
    }
    
    // Managerial roles (PIC, Admin, MasterAdmin)
    function isManager() {
      return isSignedIn() && (isPIC() || isAdmin() || isMasterAdmin());
    }

    // --- Collection Rules ---

    // Rules for 'users' collection
    match /users/{userId} {
      // Any signed-in user can read another user's profile (e.g., for showing names).
      allow read: if isSignedIn();
      
      // Managers can see lists of users (e.g., manage kurirs page).
      allow list: if isManager();
      
      // Only MasterAdmin can create new user records directly through this rule.
      // Other roles use approval flows which are handled by server-side logic.
      allow create: if isMasterAdmin();
      
      // A user can update their own profile, or an Admin/MasterAdmin can update any profile.
      allow update: if isOwner(userId) || isAdmin();
      
      // Only MasterAdmin can delete user records directly.
      allow delete: if isMasterAdmin();
    }
    
    // Rules for 'kurir_daily_tasks' collection and its subcollections
    match /kurir_daily_tasks/{taskId} {
      // The courier who owns the task or any manager can read it.
      allow read: if isOwner(get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid) || isManager();
      
      // Only the owner can create or update their own task.
      allow create, update: if isOwner(get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid);
      
      // Managers can list tasks (for reports, monitoring).
      allow list: if isManager();

      // Nobody can delete tasks from the client. Deletion should be a backend process (e.g., archiving).
      allow delete: if false; 
      
      match /packages/{packageId} {
        // Same read permissions as the parent task.
        allow read, list: if isOwner(get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid) || isManager();
        // Only the task owner can manage packages within it.
        allow create, update, delete: if isOwner(get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid);
      }
    }
    
    // Rules for 'attendance' collection
    match /attendance/{attendanceId} {
      // Any signed-in user can read any attendance record (for reports, etc.).
      allow read: if isSignedIn();
      
      // Managers can list attendance records.
      allow list: if isManager();
      
      // A courier can only create or update their own attendance record.
      // The attendanceId is formatted as {kurirUid}_{yyyy-MM-dd}.
      allow create, update: if isKurir() && isOwner(attendanceId.split('_')[0]);
    }
    
    // Rules for 'approval_requests' collection
    match /approval_requests/{requestId} {
      // PICs and Admins can create new requests.
      allow create: if isPIC() || isAdmin();
      
      // Admins/MasterAdmins can read any request.
      // A user can also read a request they initiated.
      allow read: if isAdmin() || isOwner(resource.data.requestedByUid);
      
      // This is the key fix: Allow any manager to perform list queries.
      // The client-side code is responsible for filtering (e.g., show only my requests).
      // Firestore rules secure *what kind of queries* are allowed, not *what data they return*.
      allow list: if isManager();
      
      // Only Admins/MasterAdmins can update a request (to approve/reject it).
      allow update: if isAdmin();
      
      // Only MasterAdmins can delete a request record.
      allow delete: if isMasterAdmin();
    }
    
    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
        // Only MasterAdmin can read/list system-wide notifications.
        allow read, list, update: if isMasterAdmin();
        // Notifications are created by server-side logic, not clients.
        allow create: if false;
        // Nobody can delete notifications from the client.
        allow delete: if false;
    }
  }
}
