
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user's role from their profile document
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the requesting user is a MasterAdmin
    function isMasterAdmin() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'MasterAdmin';
    }

    // Helper function to check if the requesting user is an Admin
    function isAdmin() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'Admin';
    }
    
    // Helper function to check if the requesting user is a PIC
    function isPIC() {
      return isAuthenticated() && getUserRole(request.auth.uid) == 'PIC';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Anyone authenticated can read their own profile.
      // MasterAdmins and Admins can read any user profile.
      // PICs can read Kurir profiles.
      allow read: if isAuthenticated() && (
                    isOwner(userId) || 
                    isMasterAdmin() || 
                    isAdmin() ||
                    (isPIC() && get(/databases/$(database)/documents/users/$(userId)).data.role == 'Kurir')
                  );

      // Only an authenticated user can update their own profile data.
      // MasterAdmins and Admins can update any user's data (approval flow handled by backend).
      allow update: if isAuthenticated() && (
                      isOwner(userId) ||
                      isMasterAdmin() ||
                      isAdmin()
                    );
      
      // Creating users is handled by a backend function with admin privileges.
      // We deny client-side creation for security. Deletion is also admin-only.
      allow create, delete: if isMasterAdmin();
    }

    // Rules for the 'attendance' collection
    match /attendance/{attendanceId} {
      // A Kurir can read their own attendance records.
      // PICs, Admins, and MasterAdmins can read all attendance records.
      allow read: if isAuthenticated() && (
                    isOwner(resource.data.kurirUid) ||
                    isPIC() ||
                    isAdmin() ||
                    isMasterAdmin()
                  );

      // A Kurir can only create or update their own attendance record.
      allow create, update: if isAuthenticated() && isOwner(request.resource.data.kurirUid);
    }
    
    // Rules for the 'kurir_daily_tasks' collection
    match /kurir_daily_tasks/{taskId} {
      // A Kurir can read their own tasks.
      // PICs, Admins, and MasterAdmins can read all tasks.
      allow read: if isAuthenticated() && (
                    isOwner(resource.data.kurirUid) ||
                    isPIC() ||
                    isAdmin() ||
                    isMasterAdmin()
                  );

      // A Kurir can only create or update their own daily task.
      allow create, update: if isAuthenticated() && isOwner(request.resource.data.kurirUid);

      // Rules for the 'packages' subcollection within each task
      match /packages/{packageId} {
        // A Kurir can read packages within their own task document.
        // Management roles can also read.
        allow read: if isAuthenticated() && (
                      isOwner(get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid) ||
                      isPIC() || isAdmin() || isMasterAdmin()
                    );

        // A Kurir can create, update, and delete packages within their own task.
        allow write: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/kurir_daily_tasks/$(taskId)).data.kurirUid);
      }
    }

    // Rules for the 'approval_requests' collection
    match /approval_requests/{requestId} {
      // MasterAdmins can read all requests.
      // Admins can only read the requests they created.
      allow read: if isAuthenticated() && (
                    isMasterAdmin() ||
                    (isAdmin() && resource.data.requestedByUid == request.auth.uid)
                  );
      
      // Admins can create new approval requests.
      allow create: if isAdmin();
      
      // Only MasterAdmins can update requests (to approve/reject them).
      allow update: if isMasterAdmin();
    }

    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
      // Only management roles should see notifications. MasterAdmin has a dedicated page.
      allow read: if isMasterAdmin();
      
      // Only a MasterAdmin can update a notification (e.g., mark as read).
      allow update: if isMasterAdmin();

      // Notifications should only be created by the backend.
      allow create: if false; 
    }
  }
}
